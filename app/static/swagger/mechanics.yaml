paths:
  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: Mechanic login endpoint
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "./base.yaml#/definitions/LoginResponse"
    responses:
      200:
        description: Login successful
      schema:
        $ref: "./base.yaml#/definitions/LoginResponse"
      401:
        description: "Bad Request - Invalid Email or missing fields"
        schema:
          type: object
          properties:
            message:
              type: string
        examples:
          application/json:
            message: "Invalid email or password."

  /mechanics:
    post: #Post request
      tags:
        - Mechanics
      summary: "Endpoint to create/register a new mechanic."
      description: "Endpoint to create a new mechanic in our system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new mechanic."
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          descriptions: "Successful Mechanic Creation"
          schema:
            $ref: "#/definitions/CreateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              phone: "999-999-9999"
              email: johnd@email.com
              password: password123
              salary: 1234
              role: "mechanic"
              token_version: 1
              user_uuid: 1234

        400:
          description: "Bad Request - Email already exists or missing fields"
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                email: "Email already associated with an account"
                phone: "Phone number already associated with an account"
              case2:
                email: "Invalid email address, must be in format: user@example.com"
                password: "Password must be longer than 8 characters."
                phone: "Invalid phone number format (XXX-XXX-XXXX)"

    get:
      tags:
        - Mechanics
      summary: Get all mechanics
      responses:
        200:
          description: Retrieved Mechanics
          schema:
            $ref: "./base.yaml#/definitions/AllMechanicsResponse"
          examples:
            application/json:
              case1:
                id: 1
                name: John Doe
                phone: "999-999-9999"
                email: johnd@email.com
                password: password123
                salary: 1234
                role: "mechanic"
                token_version: 1
                user_uuid: 1234
              case2:
                message: "There are no mechanics in the system."

    put:
      tags:
        - Mechanics
      summary: Endpoint to update a mechanic, can enter one or more fields
      description: "Endpoint to update a mechanic, this is a token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: "Information required to update a mechanic, can be one or more fields."
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Successfully Updated mechanic"
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: Jane Doe
              phone: "999-999-9999"
              email: "janedoe@example.com"
              password: "newpassword123"
              salary: 1234
        400:
          description: "Bad Request - Entered field are already associated with an another account"
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                email: "Email already associated with an account"
                phone: "Phone number already associated with an account."
              case2:
                email: "Invalid email address, must be in format: user@example.com"
                phone: "Invalid phone number, must be in format: 999-999-9999"
        401:
          $ref: "./base.yaml#/responses/UnauthorizedError"

    delete:
      tags:
        - Mechanics
      summary: "Endpoint to delete a mechanic"
      description: "Endpoint to delete a mechanic. Requires token authentication, mechanic must be logged in to delete their account"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted mechanic"
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"
          examples:
            application/json:
              message: "Mechanic id: <mechanic_id>, successfully deleted."
        401:
          $ref: "./base.yaml#/responses/UnauthorizedError"

  /mechanics/my-tickets:
    get:
      tags:
        - Mechanics
      summary: Get all service tickets for the logged-in mechanic
      description: Retrieve all service tickets associated with the authenticated mechanic. This is a token authenticated route, and the user must be logged in to view their tickets.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Retrieved Service Tickets
          schema:
            $ref: "./base.yaml#/definitions/ServiceTicketsResponse"
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: 1234
                service_date: 1111-11-11
                service_desc: "work"

              case2:
                message: "You have no service tickets."

        401:
          $ref: "./base.yaml#/responses/UnauthorizedError"

  /mechanics/{id}:
    get:
      tags:
        - Mechanics
      summary: Get a single mechanic by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the mechanic to retrieve
      responses:
        200:
          description: Successfully retrieved mechanic
          schema:
            $ref: "#./base.yaml#/definitions/Mechanic"
        401:
          $ref: "./base.yaml#/responses/UnauthorizedError"
        404:
          description: Mechanics with id was not found
          example:
            application/json:
              message: "Mechanic not found."

definitions:
  CreateMechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      salary:
        type: integer
    required:
      - name
      - email
      - phone
      - salary
      - password

  CreateMechanicResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      role:
        type: string
      password:
        type: string
      phone:
        type: string
      salary:
        type: integer
      user_uuid:
        type: string
      token_version:
        type: integer

  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      salary:
        type: integer

  UpdateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      salary:
        type: integer
      role:
        type: string
        example: customer
      token_version:
        type: integer
      user_uuid:
        type: string

  DeleteMechanicResponse:
    type: "object"
    properties:
      message:
        type: "string"
