swagger: '2.0'
info:
  title: Your API
  description: API to manage a mechanic shop
  version: 1.0.0
host: project-advanced-api-development.onrender.com
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
responses:
  UnauthorizedError:
    description: Unauthorized - Token is missing or invalid
    schema:
      type: object
      properties:
        message:
          type: string
    examples:
      application/json:
        case1:
          message: Invalid token!
        case2:
          message: Token has expired!
        case3:
          message: Token is no longer valid
        case4:
          message: Invalid role in token
        case5:
          message: Authorization header must start with 'Bearer'
        case6:
          message: Bearer token missing after prefix
        case7:
          message: Authorization header missing
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: 'Enter your token like: Bearer <token>'
definitions:
  LoginCredentials:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
  LoginResponse:
    type: object
    properties:
      token:
        type: string
      message:
        type: string
      status:
        type: string
  Mechanic:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      role:
        type: string
      user_uuid:
        type: string
      token_version:
        type: integer
      salary:
        type: integer
      password:
        type: string
  AllMechanicsResponse:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
        password:
          type: string
        phone:
          type: string
        salary:
          type: integer
        user_uuid:
          type: string
        token_version:
          type: integer
  ServiceTicketsResponse:
    type: object
    properties:
      id:
        type: integer
      customer_id:
        type: integer
      inventory_links:
        type: array
        items:
          type: object
          properties:
            inventory_id:
              type: integer
            quantity_used:
              type: integer
            quantity_returned:
              type: integer
      mechanics:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
  Customer:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      role:
        type: string
        example: customer
      token_version:
        type: integer
      user_uuid:
        type: string
  CreateCustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
    required:
      - name
      - email
      - phone
      - password
  CreateCustomerResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      role:
        type: string
        example: customer
      token_version:
        type: integer
      user_uuid:
        type: string
  AllCustomersResponse:
    type: object
    properties:
      total:
        type: integer
      page:
        type: integer
      pages:
        type: integer
      per_page:
        type: integer
      customers:
        type: array
        items:
          $ref: '#/definitions/Customer'
  UpdateCustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
  UpdateCustomerResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      role:
        type: string
        example: customer
      token_version:
        type: integer
      user_uuid:
        type: string
  DeleteCustomerResponse:
    type: object
    properties:
      message:
        type: string
  CreateInventoryPartPayload:
    type: object
    properties:
      part_name:
        type: string
      price:
        type: number
        format: float
      quantity:
        type: integer
  InventoryPart:
    type: object
    properties:
      id:
        type: integer
      part_name:
        type: string
      price:
        type: number
        format: float
      quantity:
        type: integer
  AllInventoryPartsResponse:
    type: array
    items:
      $ref: '#/definitions/InventoryPart'
  CreateMechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      salary:
        type: integer
    required:
      - name
      - email
      - phone
      - salary
      - password
  CreateMechanicResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      role:
        type: string
      password:
        type: string
      phone:
        type: string
      salary:
        type: integer
      user_uuid:
        type: string
      token_version:
        type: integer
  UpdateMechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      salary:
        type: integer
  UpdateMechanicResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      salary:
        type: integer
      role:
        type: string
        example: mechanic
      token_version:
        type: integer
      user_uuid:
        type: string
  DeleteMechanicResponse:
    type: object
    properties:
      message:
        type: string
  CreateServiceTicketPayload:
    type: object
    properties:
      customer_id:
        type: integer
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
      mechanic_ids:
        type: array
        items:
          type: integer
  UpdateServiceTicketInfoPayload:
    type: object
    properties:
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
  UpdateServiceTicketMechanicsPayload:
    type: object
    properties:
      add_mechanic_ids:
        type: array
        items:
          type: integer
      remove_mechanic_ids:
        type: array
        items:
          type: integer
  UpdateServiceTicketPartsPayload:
    type: object
    properties:
      inventory_id:
        type: integer
      quantity_used:
        type: integer
      quantity_returned:
        type: integer
  UpdateServiceTicketPartsResponse:
    type: object
    properties:
      message:
        type: string
      ticket_id:
        type: integer
  DeleteServiceTicketResponse:
    type: object
    properties:
      message:
        type: string
paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: Customer login endpoint
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      responses:
        '200':
          description: Login successful
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Bad Request - Invalid Email or missing fields
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: Invalid email or password.
  /customers:
    post:
      tags:
        - Customers
      summary: Endpoint to create/register a new customer.
      description: 'Endpoint to create a new customer in our system, emails must be unique.'
      parameters:
        - in: body
          name: body
          description: Information required to create a new customer.
          required: true
          schema:
            $ref: '#/definitions/CreateCustomerPayload'
      responses:
        '200':
          description: Successful Customer Creation
          schema:
            $ref: '#/definitions/CreateCustomerResponse'
          examples:
            application/json:
              id: 1
              name: John Doe
              phone: 999-999-9999
              email: johnd@email.com
              password: password123
              role: customer
              token_version: 1
              user_uuid: 1
        '400':
          description: Bad Request - Email already exists or missing fields
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                email: Email already associated with an account
                phone: Phone number already associated with an account
              case2:
                email: 'Invalid email address, must be in format: user@example.com'
                password: Password must be longer than 8 characters.
                phone: Invalid phone number format (XXX-XXX-XXXX)
    get:
      tags:
        - Customers
      summary: Get all customers
      responses:
        '200':
          description: Retrieved Customers
          schema:
            $ref: '#/definitions/AllCustomersResponse'
          examples:
            application/json:
              case1:
                total: 0
                page: 1
                pages: 0
                per_page: 10
                customers:
                  id: 1
                  name: John Doe
                  email: johndoe@email.com
                  phone: 999-999-9999
                  password: password123
                  role: customer
                  token_version: 1
                  user_uuid: uuid-1234
              case2:
                message: There are no customers in the system.
    put:
      tags:
        - Customers
      summary: 'Endpoint to update a customer, can enter one or more fields'
      description: 'Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their account.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Information to update a customer, can be one or more fields.'
          required: true
          schema:
            $ref: '#/definitions/UpdateCustomerPayload'
      responses:
        '200':
          description: Successfully Updated customer
          schema:
            $ref: '#/definitions/UpdateCustomerResponse'
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              phone: 999-999-9999
              email: dohnj@email.com
              password: password123
        '400':
          description: Bad Request - Entered field are already associated with an another account
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                email: Email already associated with an account
                phone: Phone number already associated with an account.
              case2:
                email: 'Invalid email address, must be in format: user@example.com'
                phone: 'Invalid phone number, must be in format: 999-999-9999'
        '401':
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
        - Customers
      summary: Endpoint to delete a customer
      description: 'Endpoint to delete a customer, requires token authentication, customer must be logged in to delete their account'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully deleted customer
          schema:
            $ref: '#/definitions/DeleteCustomerResponse'
          examples:
            application/json:
              message: 'Customer id: <customer_id>, successfully deleted.'
        '401':
          $ref: '#/responses/UnauthorizedError'
  '/customers/{customer_id}':
    get:
      tags:
        - Customers
      summary: Get a single customer by ID
      description: Retrieve one customer's details using their unique ID.
      parameters:
        - name: customer_id
          in: path
          required: true
          type: integer
          description: The ID of the customer to retrieve
      responses:
        '200':
          description: Successfully retrieved customer
          schema:
            $ref: '#/definitions/Customer'
        '404':
          description: Customer with given id was not found
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: Customer not found.
  /customers/my-tickets:
    get:
      tags:
        - Customers
      summary: Get all service tickets for the logged-in customer
      description: 'Retrieve all service tickets associated with the authenticated customer. This is a token authenticated route, and the user must be logged in to view their tickets.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Retrieved Service Tickets
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: '1234'
                service_date: '1111-11-11'
                service_desc: work
              case2:
                message: You have no service tickets.
        '401':
          $ref: '#/responses/UnauthorizedError'
  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: Mechanic login endpoint
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      responses:
        '200':
          description: Login successful
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Bad Request - Invalid Email or missing fields
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: Invalid email or password.
  /mechanics:
    post:
      tags:
        - Mechanics
      summary: Endpoint to create/register a new mechanic.
      description: 'Endpoint to create a new mechanic in our system, emails must be unique.'
      parameters:
        - in: body
          name: body
          description: Information required to create a new mechanic.
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        '201':
          description: Successful Mechanic Creation
          schema:
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              id: 1
              name: John Doe
              phone: 999-999-9999
              email: johnd@email.com
              password: password123
              salary: 1234
              role: mechanic
              token_version: 1
              user_uuid: 1234
        '400':
          description: Bad Request - Email already exists or missing fields
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                email: Email already associated with an account
                phone: Phone number already associated with an account
              case2:
                email: 'Invalid email address, must be in format: user@example.com'
                password: Password must be longer than 8 characters.
                phone: Invalid phone number format (XXX-XXX-XXXX)
    get:
      tags:
        - Mechanics
      summary: Get all mechanics
      responses:
        '200':
          description: Retrieved Mechanics
          schema:
            $ref: '#/definitions/AllMechanicsResponse'
          examples:
            application/json:
              case1:
                id: 1
                name: John Doe
                phone: 999-999-9999
                email: johnd@email.com
                password: password123
                salary: 1234
                role: mechanic
                token_version: 1
                user_uuid: 1234
              case2:
                message: There are no mechanics in the system.
    put:
      tags:
        - Mechanics
      summary: 'Endpoint to update a mechanic, can enter one or more fields'
      description: 'Endpoint to update a mechanic, this is a token authenticated route, and the user must be logged in to update their account.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Information required to update a mechanic, can be one or more fields.'
          required: true
          schema:
            $ref: '#/definitions/UpdateMechanicPayload'
      responses:
        '200':
          description: Successfully Updated mechanic
          schema:
            $ref: '#/definitions/UpdateMechanicResponse'
          examples:
            application/json:
              id: 1
              name: Jane Doe
              phone: 999-999-9999
              email: janedoe@example.com
              password: newpassword123
              salary: 1234
        '400':
          description: Bad Request - Entered field are already associated with an another account
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                email: Email already associated with an account
                phone: Phone number already associated with an account.
              case2:
                email: 'Invalid email address, must be in format: user@example.com'
                phone: 'Invalid phone number, must be in format: 999-999-9999'
        '401':
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
        - Mechanics
      summary: Endpoint to delete a mechanic
      description: 'Endpoint to delete a mechanic. Requires token authentication, mechanic must be logged in to delete their account'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully Deleted mechanic
          schema:
            $ref: '#/definitions/DeleteMechanicResponse'
          examples:
            application/json:
              message: 'Mechanic id: <mechanic_id>, successfully deleted.'
        '401':
          $ref: '#/responses/UnauthorizedError'
  '/mechanics/{mechanic_id}':
    get:
      tags:
        - Mechanics
      summary: Get a single mechanic by ID
      parameters:
        - in: path
          name: mechanic_id
          required: true
          type: integer
          description: ID of the mechanic to retrieve
      responses:
        '200':
          description: Successfully retrieved mechanic
          schema:
            $ref: '#/definitions/Mechanic'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Mechanic with given id was not found
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: Mechanic not found.
  /mechanics/my-tickets:
    get:
      tags:
        - Mechanics
      summary: Get all service tickets for the logged-in mechanic
      description: 'Retrieve all service tickets associated with the authenticated mechanic. This is a token authenticated route, and the user must be logged in to view their tickets.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Retrieved Service Tickets
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: '1234'
                service_date: '1111-11-11'
                service_desc: work
              case2:
                message: You have no service tickets.
        '401':
          $ref: '#/responses/UnauthorizedError'
  /service_tickets:
    post:
      tags:
        - ServiceTickets
      summary: Create service ticket endpoint
      description: 'Endpoint to create a service ticket, this is a token authenticated route, and the mechanic must be logged in to create a service ticket.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: Information required to create a service ticket.
          required: true
          schema:
            $ref: '#/definitions/CreateServiceTicketPayload'
      responses:
        '200':
          description: Successfully created service ticket
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: '1234'
                service_date: '1111-11-11'
                service_desc: work
        '400':
          description: Bad request - one or more fields failed validation.
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                VIN: VIN cannot be blank
                customer_id: Not a valid integer
                mechanic_ids: At least one mechanic must be assigned.
                service_date: 'Service date cannot be blank, must be YYYY-MM-DD'
                service_desc: Service description cannot be blank
              case2:
                VIN: 'Invalid VIN. Must be 17 characters (letters/digits, no I, O, Q)'
                customer_id: Customer with ID <customer_id> does not exist
                mechanic_ids: One or more mechanic IDs are invalid
                service_date: Service date must be in format YYYY-MM-DD
                service_desc: Service description must be at least 5 characters long
              case3:
                service_date: Service date cannot be in the past
        '401':
          $ref: '#/responses/UnauthorizedError'
    get:
      tags:
        - ServiceTickets
      summary: Get all service tickets
      description: 'Retrieve all service tickets. This is a token authenticated route, and the mechanic must be logged in to view all tickets.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Retrieved Service Tickets
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: '1234'
                service_date: '1111-11-11'
                service_desc: work
              case2:
                message: There are no service ticket in the system.
        '401':
          $ref: '#/responses/UnauthorizedError'
  /service_tickets/most-tickets:
    get:
      tags:
        - ServiceTickets
      summary: Get mechanics and list them in order of most service tickets to least
      responses:
        '200':
          description: Retrieved Mechanics
          schema:
            $ref: '#/definitions/AllMechanicsResponse'
          examples:
            application/json:
              case1:
                id: 1
                name: John Doe
                phone: 999-999-9999
                email: johnd@email.com
                password: password123
                salary: 1234
                role: mechanic
                token_version: 1
                user_uuid: 1234
              case2:
                message: There are no mechanics in the system.
  '/service_tickets/{ticket_id}':
    parameters:
      - in: path
        name: ticket_id
        type: integer
        required: true
        description: ID of the service ticket to retrieve
    get:
      tags:
        - ServiceTickets
      summary: Get a single service ticket by ID
      responses:
        '200':
          description: Successfully retrieved service ticket
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
        '404':
          description: Service ticket with the specified ID was not found.
          examples:
            application/json:
              message: Service ticket with the specified ID was not found.
    delete:
      tags:
        - ServiceTickets
      summary: Endpoint to delete a service ticket
      description: 'Endpoint to delete a service ticket. Requires token authentication, mechanic must be logged in to delete a service ticket.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully deleted service ticket.
          schema:
            $ref: '#/definitions/DeleteServiceTicketResponse'
          examples:
            application/json:
              message: Service ticket <service_id> deleted successfully.
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Service ticket with the specified ID was not found
          examples:
            application/json:
              message: Service ticket with the specified ID was not found
  '/service_tickets/{ticket_id}/update-info':
    parameters:
      - in: path
        name: ticket_id
        required: true
        type: integer
        description: ID of the service ticket to update
    put:
      tags:
        - ServiceTickets
      summary: 'Endpoint to update a service ticket info, can enter one or more fields'
      description: 'Endpoint to update a service ticket, this is a token authenticated route, and the mechanic must be logged in to update the service ticket.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Information required to update a service ticket''s info, can be one or more fields.'
          required: true
          schema:
            $ref: '#/definitions/UpdateServiceTicketInfoPayload'
      responses:
        '200':
          description: Successfully updated service ticket
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: '1234'
                service_date: '1111-11-11'
                service_desc: work
        '400':
          description: Bad request - one or more fields failed validation.
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                VIN: VIN cannot be blank
                service_date: 'Service date cannot be blank, must be YYYY-MM-DD'
                service_desc: Service description cannot be blank
              case2:
                VIN: 'Invalid VIN. Must be 17 characters (letters/digits, no I, O, Q)'
                service_date: Service date must be in format YYYY-MM-DD
                service_desc: Service description must be at least 5 characters long
              case3:
                service_date: Service date cannot be in the past
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Service ticket with the specified ID was not found.
          examples:
            application/json:
              message: Service ticket with the specified ID was not found.
  '/service_tickets/{ticket_id}/update-mechanics':
    parameters:
      - in: path
        name: ticket_id
        required: true
        type: integer
        description: ID of the service ticket to update
    put:
      tags:
        - ServiceTickets
      summary: 'Endpoint to update a service ticket to add or remove mechanics, can enter one or more fields'
      description: 'Endpoint to update a service ticket to add and remove mechanics, this is a token authenticated route, and the mechanic must be logged in to update the service ticket.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Information required to update a service ticket''s mechanics, can be one or more fields.'
          required: true
          schema:
            $ref: '#/definitions/UpdateServiceTicketMechanicsPayload'
      responses:
        '200':
          description: Successfully updated service ticket
          schema:
            $ref: '#/definitions/ServiceTicketsResponse'
          examples:
            application/json:
              case1:
                id: 1
                customer_id: 1
                inventory_links: []
                mechanics: []
                VIN: '1234'
                service_date: '1111-11-11'
                service_desc: work
        '400':
          description: Bad request - one or more fields failed validation.
          schema:
            type: object
          examples:
            application/json:
              case1:
                add_mechanic_ids: One or more mechanic IDs are invalid
                remove_mechanic_ids: One or more mechanic IDs are invalid
              case2:
                error: Cannot remove the last mechanic from service ticket; at least one must remain.
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Service ticket with the specified ID was not found.
          examples:
            application/json:
              message: Service ticket with the specified ID was not found.
  '/service_tickets/{ticket_id}/update-parts':
    parameters:
      - in: path
        name: ticket_id
        required: true
        type: integer
        description: ID of the service ticket to update
    put:
      tags:
        - ServiceTickets
      summary: 'Endpoint to update a service ticket to add or remove parts, can enter one or more fields'
      description: 'Endpoint to update a service ticket to add or remove parts, this is a token authenticated route, and the mechanic must be logged in to update the service ticket.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Information required to update a service ticket''s inventory parts, fields are for used parts and returned parts.'
          required: true
          schema:
            $ref: '#/definitions/UpdateServiceTicketPartsPayload'
      responses:
        '200':
          description: Successfully updated service ticket
          schema:
            $ref: '#/definitions/UpdateServiceTicketPartsResponse'
          examples:
            application/json:
              message: 1 parts(s) added
              ticket_id: 1
        '400':
          description: Bad request - one or more fields failed validation.
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                inventory_id: Part id <part_id> does not exist
                quantity_used: quantity_used cannot be negative
                quantity_returned: quantity_used cannot be negative
              case2:
                schema: At least one of quantity_used or quantity_returned must be provided
              case3:
                error: 'Not enough {part.part_name}s in inventory'
              case4:
                error: 'Cannot return more {part.part_name}s than used in this ticket'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Service ticket with the specified ID was not found.
          examples:
            application/json:
              message: Service ticket with the specified ID was not found.
  /inventories:
    post:
      tags:
        - Inventories
      summary: Create part for inventory
      description: 'Endpoint to create a part for inventory, this is a token authenticated route, and the mechanic must be logged in to create a part.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: Information required to create a inventory part.
          required: true
          schema:
            $ref: '#/definitions/CreateInventoryPartPayload'
      responses:
        '200':
          description: Successfully created inventory part
          schema:
            $ref: '#/definitions/InventoryPart'
          examples:
            application/json:
              id: 1
              part_name: Headlight
              price: 5.99
              quantity: 1
        '400':
          description: Bad request - one or more fields failed validation.
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                part_name: Name must be at least 2 characters long
                price: Not a valid number
                quantity: Not a valid integer
              case2:
                price: Price must be at least 0.01
                quantity: Quantity must be at least 1
        '401':
          $ref: '#/responses/UnauthorizedError'
    get:
      tags:
        - Inventories
      summary: Get all parts in inventory
      description: Endpoint to get all part from inventory
      responses:
        '200':
          description: Retireved all inventory parts
          schema:
            $ref: '#/definitions/AllInventoryPartsResponse'
          examples:
            application/json:
              case1:
                - id: 1
                  part_name: Headlight
                  price: 10
                  quantity: 19
                - id: 2
                  part_name: Tail Light
                  price: 12
                  quantity: 15
              case2:
                message: There are no parts in the system.
  '/inventories/{part_id}':
    parameters:
      - name: part_id
        in: path
        required: true
        type: integer
        description: The ID of the part to retrieve
    get:
      tags:
        - Inventories
      summary: Get part in inventory
      description: Endpoint to get a part from inventory
      responses:
        '200':
          description: Retireved inventory part
          schema:
            $ref: '#/definitions/InventoryPart'
          examples:
            application/json:
              case1:
                id: 2
                part_name: Tail Light
                price: 12
                quantity: 15
        '404':
          description: Part with specified ID not found
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            message: Invalid part id
    put:
      tags:
        - Inventories
      summary: 'Endpoint to update a part in inventory, can enter one or more fields'
      description: 'Endpoint to update a inventory part, this is a token authenticated route, and the mechanic must be logged in to update the part.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: 'Information to update an inventory part, can be one or more fields.'
          required: true
          schema:
            type: object
            properties:
              part_name:
                type: string
              price:
                type: number
                format: float
              quantity:
                type: integer
      responses:
        '200':
          description: Successfully Updated inventory part
          schema:
            $ref: '#/definitions/InventoryPart'
          examples:
            application/json:
              id: 1
              part_name: Headlight
              price: 5.99
              quantity: 1
        '400':
          description: Bad request - one or more fields failed validation.
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              case1:
                part_name: Name must be at least 2 characters long
                price: Not a valid number
                quantity: Not a valid integer
              case2:
                price: Price must be at least 0.01
                quantity: Quantity must be at least 1
        '401':
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
        - Inventories
      summary: Endpoint to delete a inventory part
      description: 'Endpoint to delete a inventory part, requires token authentication, mechanic must be logged in to delete the part from inventory.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully deleted inventory part
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: 'Successfully deleted part id <part_id>: part_name'
        '401':
          $ref: '#/responses/UnauthorizedError'
        '404':
          description: Part with specified ID not found
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            message: Invalid part id
